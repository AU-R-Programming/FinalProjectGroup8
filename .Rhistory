knitr::opts_chunk$set(echo = TRUE)
response <- as.vector(response)
aaa<-rep(20,10)
aaa<-t(rep(20,10))
View(aaa)
View(aaa)
aaa<-rep(20,10)
ta<-t(aaa)
aaa<-rep(20,10)
aaa<-as.vector(aaa)
ta<-t(aaa)
aaa<-as.vector(aaa)
ta<-t(aaa)
aaa<-rep(20,10)
aaa<-as.vector(aaa)
ta<-t(aaa)
View(ta)
View(ta)
aaa<-rep(20,10)
aaa<-as.vector(aaa)
ta<-t(t(aaa))
View(ta)
View(ta)
aaa<-rep(20,10)
ta<-t(t(aaa))
ta<-t(t(aaa))
ta<-as.vector(ta)
set.seed(123)
n<-100
J<-floor(log2(n)-1)
omega<- diag(rep(1,J))
wv_wn<-function(rob,J){
rob/2^(1:J)
}
wn_loss<-function(theta){
t(nu_hat-wv_wn(theta, J))%*%Omega%*%(nu_hat-wv_wn(theta, J))
}
param<-1
wn=gen_gts(n,WN(sigma2=param))
wv_hat<-wvar(wn)
optim(1,wn_loss, nu_hat=wv_hat,J=J)$par
install.packages("wv")
library(vw)
library(wv)
wv_wn<-function(rob,J){
rob/2^(1:J)
}
wn_loss<-function(theta){
t(nu_hat-wv_wn(theta, J))%*%Omega%*%(nu_hat-wv_wn(theta, J))
}
param<-1
wn=gen_gts(n,WN(sigma2=param))
wv_hat<-wvar(wn)
optim(1,wn_loss, nu_hat=wv_hat,J=J)$par
# The first part of the code is from section 6.4 of the book
# linear regression model
my_lm = function(y, x, alpha) {
# Make sure data formats are appropriate
y <- as.vector(y)
x <- as.matrix(x)
# Define parameters
n <- length(y)
p <- dim(x)[2]
df <- n - p
# Estimate beta through Eq. (6.1)
beta.hat <- solve(t(x)%*%x)%*%t(x)%*%y
# Estimate of the residual variance (sigma2) from Eq. (6.3)
# Compute residuals(n*1)
resid <- y - x%*%as.matrix(beta.hat)
sigma2.hat <- (1/df)*t(resid)%*%resid
# Estimate of the variance of the estimated beta from Eq. (6.2)
var.beta <- sigma2.hat*solve(t(x)%*%x)
######################################################
## Estimate of the confidence interval based on alpha
quant <- 1 - alpha/2
ci.beta <- c(beta.hat - qnorm(p = quant)*sqrt(var.beta), beta.hat +
qnorm(p = quant)*sqrt(var.beta))
######################################################
#plot
##residual vs fitted values
y.hat <- x%*%beta.hat
fig1<-plot(y.hat, resid,
main="residual vs fitted values",
xlab="fitted values",
ylab="residual")
##qq-plot of residuals
nr<- length(resid)
zpercent<-1/nr
z<-qnorm(p = zpercent*(1:nr))
fig2<-plot(z,resid,
main="qq-plot of residuals",
xlab="theoretical quantiles",
ylab="sample quantiles")
##Histogram (or density) of residuals
densi<-density(resid)
fig3<-plot(resid,densi,
main="Histogram (or density) of residuals",
xlab="residual",
ylab="density")
######################################################
#Mean Square Prediction Error (MSPE)
MSPE<- (1/n)*t(resid)%*%resid
######################################################
#F-test
yaverge<-mean(y)
ybar<-rep(yaverage, n)
SSM<-t(y.hat-ybar)%*%(y.hat-ybar)
SSE<-t(resid)%*%resid
MSM<-SSM/(p-1)
MSE<-SSE/df
Fstar<-MSM/MSE
Probofftest<-pf(fstar, p-1, df, lower.tail = FALSE)
# Return all estimated values
return(list( ci = ci.beta,fig1,fig2,fig3,MSPE=MSPE,
Ftest=Fstar,Probability=Probofftest))
}
# The first part of the code is from section 6.4 of the book
# linear regression model
my_lm = function(y, x, alpha) {
# Make sure data formats are appropriate
y <- as.vector(y)
x <- as.matrix(x)
# Define parameters
n <- length(y)
p <- dim(x)[2]
df <- n - p
# Estimate beta through Eq. (6.1)
beta.hat <- solve(t(x)%*%x)%*%t(x)%*%y
# Estimate of the residual variance (sigma2) from Eq. (6.3)
# Compute residuals(n*1)
resid <- y - x%*%as.matrix(beta.hat)
sigma2.hat <- (1/df)*t(resid)%*%resid
# Estimate of the variance of the estimated beta from Eq. (6.2)
var.beta <- sigma2.hat*solve(t(x)%*%x)
######################################################
## Estimate of the confidence interval based on alpha
quant <- 1 - alpha/2
ci.beta <- c(beta.hat - qnorm(p = quant)*sqrt(var.beta), beta.hat +
qnorm(p = quant)*sqrt(var.beta))
######################################################
#plot
##residual vs fitted values
y.hat <- x%*%beta.hat
fig1<-plot(y.hat, resid,
main="residual vs fitted values",
xlab="fitted values",
ylab="residual")
##qq-plot of residuals
nr<- length(resid)
zpercent<-1/nr
z<-qnorm(p = zpercent*(1:nr))
fig2<-plot(z,resid,
main="qq-plot of residuals",
xlab="theoretical quantiles",
ylab="sample quantiles")
##Histogram (or density) of residuals
densi<-density(resid)
fig3<-plot(resid,densi,
main="Histogram (or density) of residuals",
xlab="residual",
ylab="density")
######################################################
#Mean Square Prediction Error (MSPE)
MSPE<- (1/n)*t(resid)%*%resid
######################################################
#F-test
yaverge<-mean(y)
ybar<-rep(yaverage, n)
SSM<-t(y.hat-ybar)%*%(y.hat-ybar)
SSE<-t(resid)%*%resid
MSM<-SSM/(p-1)
MSE<-SSE/df
Fstar<-MSM/MSE
Probofftest<-pf(fstar, p-1, df, lower.tail = FALSE)
# Return all estimated values
return(list( ci = ci.beta,fig1,fig2,fig3,MSPE=MSPE,
Ftest=Fstar,Probability=Probofftest))
}
adult<- read.table("adult.csv", sep=";", header=T)
adult$salary<-adult$NA.
adult$NA.<-NULL
library(stringr)
adult$salary <- str_replace_all(adult$salary, fixed(" "), "")
adult$salary <- as.factor(adult$salary)
adult$salary <- with(adult,ifelse(adult$salary == ">50K", '1', '0'))
adult$salary <- as.factor(adult$salary)
View(adult)
View(adult)
forestfires<- read.table("forestfires.csv", sep=";", header=T)
View(forestfires)
View(forestfires)
forestfires<- read.table("forestfires.csv", header=T)
View(forestfires)
View(forestfires)
forestfires<- read.table("forestfires.csv", header=T)
View(forestfires)
View(forestfires)
forestfires<- read.table("forestfires.csv")
View(forestfires)
View(forestfires)
forestfires<- read.table("forestfires.csv")
View(forestfires)
View(forestfires)
forestfires<- read.csv("forestfires.csv")
View(forestfires)
View(forestfires)
yy<-forestfires$Y
xx<-c(forestfires$X,forestfires$month,forestfires$DC)
yy<-forestfires$Y
xx<-as.data.frame(forestfires$X,forestfires$month,forestfires$DC)
View(xx)
View(xx)
xx<-table(forestfires$X,forestfires$month,forestfires$DC)
xx<-subset(forestfires,forestfires$X&forestfires$month&forestfires$DC)
source('~/GitHub/FinalProjectGroup8/Final project code part.R')
xx<-forestfires$X,forestfires$month,forestfires$DC
xx<-forestfires[,c(forestfires$X,forestfires$month,forestfires$DC)]
xx<-forestfires[,c("X","month","DC")]
View(xx)
View(xx)
yy<-forestfires$Y
my_lm = function(y, x, alpha) {
# Make sure data formats are appropriate
y <- as.vector(y)
x <- as.matrix(x)
# Define parameters
n <- length(y)
p <- dim(x)[2]
df <- n - p
# Estimate beta through Eq. (6.1)
beta.hat <- solve(t(x)%*%x)%*%t(x)%*%y
# Estimate of the residual variance (sigma2) from Eq. (6.3)
# Compute residuals(n*1)
resid <- y - x%*%as.matrix(beta.hat)
sigma2.hat <- (1/df)*t(resid)%*%resid
# Estimate of the variance of the estimated beta from Eq. (6.2)
var.beta <- sigma2.hat*solve(t(x)%*%x)
######################################################
## Estimate of the confidence interval based on alpha
quant <- 1 - alpha/2
ci.beta <- c(beta.hat - qnorm(p = quant)*sqrt(var.beta), beta.hat +
qnorm(p = quant)*sqrt(var.beta))
######################################################
#plot
##residual vs fitted values
y.hat <- x%*%beta.hat
fig1<-plot(y.hat, resid,
main="residual vs fitted values",
xlab="fitted values",
ylab="residual")
##qq-plot of residuals
nr<- length(resid)
zpercent<-1/nr
z<-qnorm(p = zpercent*(1:nr))
fig2<-plot(z,resid,
main="qq-plot of residuals",
xlab="theoretical quantiles",
ylab="sample quantiles")
##Histogram (or density) of residuals
densi<-density(resid)
fig3<-plot(resid,densi,
main="Histogram (or density) of residuals",
xlab="residual",
ylab="density")
######################################################
#Mean Square Prediction Error (MSPE)
MSPE<- (1/n)*t(resid)%*%resid
######################################################
#F-test
yaverge<-mean(y)
ybar<-rep(yaverage, n)
SSM<-t(y.hat-ybar)%*%(y.hat-ybar)
SSE<-t(resid)%*%resid
MSM<-SSM/(p-1)
MSE<-SSE/df
Fstar<-MSM/MSE
Probofftest<-pf(fstar, p-1, df, lower.tail = FALSE)
# Return all estimated values
return(list( ci = ci.beta,fig1,fig2,fig3,MSPE=MSPE,
Ftest=Fstar,Probability=Probofftest))
}
my_lm(yy,xx,0.05)
